extends docs.pug
block content
	.row.d-flex.justify-content-center.pt-2.pb-2
		button.button.m-2(name='doc-collect') collect
		button.button.m-2(name='doc-manage') manage
		button.button.m-2(name='doc-analyze') analyze
		button.button.m-2(name='doc-visualize') visualize
		button.button.m-2(name='doc-tools') tools
	.paragraph
		p Over the past year and a half I have been educating myself on the various open sourced tools / libraries / software that exist for collecting, managing/cleaning, analyzing, and visualizing geospatial data. I have learned through various resources: blog tutorials, YouTube videos, conferences, academic papers, and work. In this post I will share with you the main tools I use for my work. This guide is aimed for beginners in the GIS field. 

		p If you donâ€™t feel like reading all the details, feel free to go to the 
			a.link(name='doc-tools') Tools section
			|  where I list all the tools I use.

		p If you learn through doing, I wrote a 
			a.link(href='./guides/tutorials') tutorial
			|  that shows how to build  an interactive Mapbox GL JS React map.

		.row.pt-2.pb-2.d-flex.justify-content-around
			img.col-2.rounded-circle.img-thumbnail.p-1(src='/images/doc1-0.png')
			img.col-2.rounded-circle.img-thumbnail.p-1(src='/images/doc1-3.png')
			img.col-2.rounded-circle.img-thumbnail.p-1(src='/images/doc1-1.png')
			img.col-2.rounded-circle.img-thumbnail.p-1(src='/images/doc1-6.png')
		
		h2#doc-collect Data Collection

		h3 Data

		p The data I handle is either implicitly or explicitly georeferenced, or both. By implicit, I mean the geographic reference (i.e., the reference to place or space) is implied through text, such as text in a tweet or the tweeter's profile location. By explicit, I mean the geographic reference is implied through geographic coordinates, which assigns it to a specific place on Earth's surface. 

		p The following are the primary data types that I have encountered: 
			a.link(hred='http://geojson.org/' target='_blank') geojson / json
			| , 
			a.link(href='https://wiki.openstreetmap.org/wiki/OSM_XML' target='_blank') osm xml 
			| /
			a.link(href='https://wiki.openstreetmap.org/wiki/PBF_Format' target='_blank') pbf
			| , 
			a.link(href='https://en.wikipedia.org/wiki/Shapefile' target='_blank') shp
			| , 
			a.link(href='https://en.wikipedia.org/wiki/Keyhole_Markup_Language' target='_blank') kml / kmz
			| , 
			a.link(href='https://github.com/mapbox/mbtiles-spec' target='_blank') mbtiles
			| , and 
			a.link(href='https://en.wikipedia.org/wiki/Comma-separated_values' target='_blank') csv
			| .

		h3 Data Sources

		p I collect the data through various sources. If I am working for a client, they usually provide me with the data; but, for my own projects, I search for data from the following sources:

		ul
			li Municipal, provincial/state, and federal open data portals 
			li International organization's open data portals (e.g., World Bank, World Wildlife Fund)
			li OpenStreetMap (OSM)
			li Text mining / scraping (e.g., Twitter, Kijiji ads)

		h3 Data Extraction / Clean

		p There are various ways to extract the data from the sources listed above. Some methods require more technical experience, such as using the command line, while others offer a user-friendly graphical interface to extract data.

		p The government data I mostly work with are from Canadian government entities, like municipalities or federal departments. Most of these sources, as well as other international organizations, usually release static data (like a dump file). You can download the data through their open data portals. The data is downloaded from the browser onto your computer for use. 

		p However, more government entities are releasing their data through application programming interfaces (APIs), which allows users to stream the data. For example, the map in the 	
			a.link(href='/about' target='_blank') about
			|  section visualizes live streaming data from NRCan's Earthquake API. I also follow  
			a.link(href='https://twitter.com/cdngovrepos' target='_blank') this bot
			|  created by James McKinney that tweets whenever any Canadian government releases a new repo. Although APIs / repos require more technical experience, they allow governments to start providing real-time data.

		p 	
			a.link(href='https://www.openstreetmap.org' target='_blank') OSM
			|  is a global wiki-like project that aims to map all features on Earth's surface through points/nodes, lines/ways, and polygons/enclosed ways. OSM objects' attributes are stored through tags. OSM's database is open for anyone to use as long as it is in accordance to its license. OSM has a growing number of contributors, which includes cartographers, governments, and private and public companies. 

		p I usually extract the data from 
			a.link(href='https://www.geofabrik.de/data/download.html' target='_blank') Geofabrik
			| . Geofrabik allows your to download OSM data based off geographic region (i.e. planet, continent, countries, and you can download at smaller geographies in specific countries). The data can be downloaded as an osm xml or pbf. I usually download it as an osm xml (or .osm) and then convert it into GeoJSON using 
			a.link(href='https://github.com/mapbox/minjur' target='_blank') minjur
			|  from the command line: 

		p.code minjur mexico-latest.osm.pbf > mexico.geojson

		p Sometimes I have to download the planet file to get to the geographic region I need. In this case the data is too big to handle, so before I do any processing I clip the planet file within a bounding box or polygon. I use  
			a.link(href='https://github.com/openstreetmap/osmosis' target='_blank') osmosis
			|  or 
			a.link(href='http://osmcode.org/osmium-tool/' target='_blank') osmium
			|  to clip the data. To determine the bounding box, I use this 
			a.link(href='http://lxbarth.com/bbox' target='_blank') tool
			| . For example, I use the following script to clip an osm file to the correct geographic region I need: 

		p.code osmosis --read-xml mexico-latest.osm --bounding-box top=18.68111038213857 left=-98.55468750022783 bottom=14.550546646410794 right=-90.38444519009329 --write-xml oaxaca-and-chiapas.osm

		p It is important to consider whether you should download the data as a bounding box or polygon. Bounding boxes can be easier to extract data, but it also can cause additional or missing data for a geographic region. For instance, if I need to collect data for a city, I would use a polygon of the municipality's boundary lines over a bounding box. A bounding box does not give a realisitic reprentation of a place.

		p You can also download OSM data from 
			a.link(href='https://mapzen.com/data/metro-extracts/' target='_blank') Mapzen Metro Extracts
			|  or 
			a.link(href='https://export.hotosm.org/en/v3/exports/new' target='_blank') Humanitarian OSM Team Export Tool
			|  or 
			a.link(href='https://josm.openstreetmap.de/' target='_blank') JOSM
			|  as GeoJSONs. These options allow you to avoid the command line if you do not feel comfortable using it.

		p For text mining / scraping. There are various methods for extracting text from a source, but in my case I have used tweets as a source of georeferenced data. You can mine tweets through Twitter's Streaming API. There are various ways to use the API and store the tweets. In my case I followed a similar method as 
			a.link(href='http://adilmoujahid.com/posts/2014/07/twitter-analytics/' target='_blank') this tutorial
			| . Tweets and other social media platforms have become sources for both implicit and explicit georeferenced user-generated content. That said, there are some holes in these mined datasets, even if you can collect millions of objects. For instance, most social media posts are not explicitly georeferenced (i.e., not geotagged). To get enough georeferenced tweets, one should then assess other ways to extract the geographic informations, but these other mechanisms can enforce assumptions. For example, I assumed a user's profile location is where the tweet was located, but that may not necessarily be the case. Even my own Twitter profile's location is not where I am currently residing!

		h2#doc-manage Data Management

		h3 Data Storage

		p I decide what method to store my data in based off the size and type. 

		p If I am working with a small dataset (< 1,000 objects with few attributes), I usually handle the data through JavaScript on the browser. I will store the data in a Google Sheet or GeoJSON. I then use AJAX's get function to pull the data from a url: 

		textarea(readonly = 'readonly').
			var url = "http://www.earthquakescanada.nrcan.gc.ca/api/earthquakes/latest/30d.json";

			$.getJSON(url, function(data) {
				...
			});

		p I have also used Google Sheets and Google Fusion Tables to store data and pull into a JavaScript. I wrote a 
			a.link(href='http://www.juliaconzon.com/docs/doc-4' target='_blank') tutorial
			|  for this methodology. This method is easy for people to input new data, but it does have a limit as there is no server functionality, the data is still being pulled to the browser. I avoid using this method with larger datasets because the browser will run out of memory and choke.

		p For datasets larger than 1,000 objects, I use PostGIS or MBTiles. PostGIS is useful because you can run various pre-existing algorithmns to manage your data, and if you do not feel comfortable handling the data from Terminal, you can use pgAdmin, which is a graphical interface to manage your PostGIS database. You can see how I have used PostGIS for handling data 
			a.link(href='https://github.com/Noznoc/geojson-api' target='_blank') here
			| .

		p If visualizing the data is more important than the storage and analaysis of the data, I use MBTiles. I usually modify my MBTiles using Mapbox Studio or GL JS. I use Mapbox Studio to style my map layer and add my MBTiles, but I use Mapbox GL JS library in JavaScript / React to interact with the data from the browser. This is detailed more in the 
			a.link(name='doc-visualize') Data Visualization
			|  section.

		h3 Data Cleaning

		.row.d-flex.justify-content-center.pt-2.pb-2.text-center
			.col-3.iconography
				h4 UNIFORM PROJECTION
			i.fa.fa-arrow-right.txt-xlrg.p-2(aria-hidden='true')
			.col-3.iconography
				h4 UNIFORM FILE FORMAT
			i.fa.fa-arrow-right.txt-xlrg.p-2(aria-hidden='true')
			.col-3.iconography
				h4 MERGE / JOIN DATA

		p Since I usually get my data from various sources I have to first make sure the data is uniform before I merge them for analysis. This will reduce any data inconsistencies that can skew the data. In general, the following are the mains steps I complete:

		ul
			li STEP 1: Reproject the data in the same projection. I usually stick with EPSG 4362: WGS 84 because it is a consistent projection most people use (e.g., Google, Mapbox). I usually just change the projection in QGIS, but other libraries exist that I have also used in the past, such as GDAL.

			li STEP 2: Convert the data into the same file format (e.g., GeoJSONs or shapefiles). I also use QGIS for this, but ogr2ogr, osmosis, minjur all work as well. 

			li STEP 3: Merge datasets, usually by spatial join or matching field names. This step can be completed in QGIS, with GDAL, or in PostGIS.

		p After the data is all cleaned and formatted accordingly, I can analyze the data!

		h2#doc-analyze Data Analysis
		
		p The following are tools I use to spatially analyze data: 

		ul

			li QGIS with the stat tools, 
			li PostSQL / PostGIS
			li R / RStudio
			li Esri software 

		p QGIS is an open sourced graphical interface for managing, analyzing, and visualizing geospatial data. It uses the GDAL library and has various extensions that can be added. More information about QGIS can be found 
			a.link(href='https://en.wikipedia.org/wiki/QGIS' target='_blank') here
			| .

		p PostSQL / PostGIS is an open sourced library for storing, managing, and analyzing geospatial data. PostGIS has various alogrithms for analyzing the data, I use the 
			a.link(href='http://postgis.net/documentation/' target='_blank') documentation
			|  to know what tools exist. 

		p In RStudio, an open sourced graphical interface to use R, can be used to store, manage, analyze, and visualize your geospatial data. There are various packages that can be used, including: 
			a.link(href='https://cran.rstudio.com/web/packages/ggplot2/index.html' target='_blank') ggplot2
			| , 
			a.link(href='https://rstudio.github.io/leaflet/' target='_blank') leaflet
			| .

		p Esri offers propreitary software to store, manage, analyze, and visualize geospatial data. Since it is not open sourced, I do not have the opprotunity to use this tool very often.

		h2#doc-visualize Data Visualization

		p In this section I will focus on how to visualize geospatial data as an interactive map; but, keep in mind, spatial data doesn't always need to be visualized as a map. For inspiration, I recommend checking out the following sources: 
			a.link(href='https://www.reddit.com/r/dataisbeautiful/' target='_blank') D3.js examples 
			| and 
			a.link(href='https://www.reddit.com/r/dataisbeautiful/' target='_blank') Reddit
			| . 

		.row.mt-4
		
			.col-3
				img.rounded-circle.img-thumbnail.col-12.p-1.m-1(src='/images/doc1-1.png')
				img.rounded-circle.img-thumbnail.col-12.p-1.m-1(src='/images/doc1-5.png')
				img.rounded-circle.img-thumbnail.col-12.p-1.m-1(src='/images/doc1-2.png')
		
			.col-9
				p Initially I visualized spatial data as static maps using Esri's ArcMap software, but through my education I learned how to develop interactive web maps that can enhance a user's experience viewing and interpreting geographic data represented as a map.
				
				p I started developing interactive web maps using the 
					a.link(href='http://leafletjs.com/' target='_blank') Leaflet
					|  library. I avoided familiarizing myself with Google Maps API because Google deprecates their APIs frequently. Now I use 
					a.link(href='https://www.mapbox.com/mapbox-gl-js/api/' target='_blank') Mapbox GL JS
					| .

				p How I manage my spatial data depends on the volume, velocity, and variety of data. If the data is low volume, velocity, and variety, I will pull the data to the browser using AJAX (as shown 
					a.link(name='doc-manage') above
					| ). An example of this can be seen 
					a.link(href='https://github.com/Noznoc/i-vop' target='_blank') here
					| . 

				p If the data is high volume and variety, but there is no velocity (i.e., the data is static), I will use MBTiles. I design the MBTiles as a style in Mapbox Studio and then interact with the style's layers using Mapbox GL JS. An example of this can be seen 
					a.link(href='https://github.com/Noznoc/mexico-earthquake-mapping' target='_blank') here
					| . Also, I wrote a 
					a.link(href='./docs/doc-2') tutorial (crimecouver)
					|  on how I created a custom map style with Mapbox Studio and used React and Mapbox GL JS to interact and visualize the style's layers.  

				p If my data has high volume, variety, and velocity, I store the data in PostGIS and then create a Node.js app with a RESTful API to visualize the data. An example of this can be seen 
					a.link(href='https://github.com/Noznoc/geojson-api' target='_blank') here
					| .

				p I will also use 
					a.link(href='http://earth.google.es/' target='_blank') Google Earth
					|  to visualize low/medium volume, zero velocity, and low/medium variety KML / KMZ data that I want to be visualized in 3D. I tend to avoid Google products, but Mapbox GL JS does not support a 3D Earth surface yet. Mapbox GL JS supports extrusions, which is great for visualizing 3D buildings but poor for visualizing elevation. For example, if I wanted to show elevation I could develop an elevation profile as an extruded line with Mapbox GL JS; but, visualizing a trek on a 3D surface really tells a story about the distance and height one walked and it can be easily done on Google Earth's graphical interface. 
		
		h2#doc-tools Tools

		p Here is a list of most of the tools I use. Feel free to 
			a.link(href='/contact', target='_blank') contact
			|  me if you have any recommendations!

		ul
			li 
				a.link(href='https://d3js.org/', target='_blank') D3.js
				|  is an open-source library for visualizing data
			li 
				a.link(href='https://www.esri.com/en-us/home', target='_blank') Esri
				|  proprietary software can be used to manage, analyze, and visualize geospatial data
			li 
				a.link(href='http://www.gdal.org/', target='_blank') Geospatial Data Abstraction Library (GDAL)
				|  is an open-source library for managing geospatial data
			li 
				a.link(href='https://www.geofabrik.de/', target='_blank') Geofabrik
				|  is a web site that allows you to download OSM data in different formats by different geographic scales
			li 
				a.link(href='http://geojson.io/', target='_blank') geojson.io
				|  allows you to edit GeoJSONs easily
			li 
				a.link(href='https://export.hotosm.org/en/v3/', target='_blank') HOT Export Tool
				|  is an "open service that creates customize extracts of up-to-date OSM data in various file formats"
			li 
				a.link(href='https://josm.openstreetmap.de/', target='_blank') JOSM
				|  is an open-source graphic interface to contribute, edit, validate OSM data, but can also be used to extract and visualize geospatial data as well
			li 
				a.link(href='http://leafletjs.com/', target='_blank') Leaflet
				|  is an open-source JS library to develop interactive maps
			li 
				a.link(href='https://www.mapbox.com/studio/', target='_blank') Mapbox Studio
				|  is an open-source graphical interface for designing map layers as well as developing data-driven styling
			li 
				a.link(href='https://www.mapbox.com/mapbox-gl-js/api/', target='_blank') Mapbox GL JS
				|  is an open-source library for developing interactive web maps
			li 
				a.link(href='https://www.mapbox.com/cartogram/', target='_blank') Mapbox Cartogram
				|  is an open-source tool to help design a map layer based on a reference image
			li 
				a.link(href='https://mapzen.com/data/metro-extracts/', target='_blank') Mapzen Metro Extracts
				|  allows your to download OSM data in various file formats from various cities
			li 
				a.link(href='https://github.com/mapbox/minjur', target='_blank') minjur
				|  is an open-source library for managing OSM data
			li 
				a.link(href='https://wiki.openstreetmap.org/wiki/Osmosis', target='_blank') osmosis
				|  is an open-source library for managing OSM data
			li 
				a.link(href='https://tyrasd.github.io/osmtogeojson/', target='_blank') osm2geojson
				|  is an open-source library for converting OSM data to GeoJSON(s)
			li 
				a.link(href='https://www.postgresql.org/', target='_blank') PostgreSQL
				|  / 
				a.link(href='http://postgis.net/', target='_blank') PostGIS
				|  is an open-source library to store, manage, and visualize geospatial data. PostGIS has spatial index which can decrease computational time for analysis.
			li 
				a.link(href='http://qgis.org/en/site/', target='_blank') QGIS
				|  is an open-source graphical software that is similar to ArcMap. It is used to manage, analyze, and visualize spatial data. QGIS uses GDAL and you can use various extensions to conduct specific analyses or visualizations
